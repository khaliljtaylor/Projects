** start of html **

<!DOCTYPE html>
<html lang="en">
  <html>
    <main id="main-doc">
      <head>
        <meta charset="utf=8" />
        <link rel="stylesheet" href="./styles.css" />
        <title>Technical Documentation</title>
      </head>
      <body>
        <nav id="navbar">
          <h1>Introduction</h1>
          <header>JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.</header> 
          <a class="nav-link" href="#Hello_World">Hello World</a>
          <a class="nav-link" href="#Variables">Variables</a>
          <a class="nav-link" href="#Declaring_variables">Declaring variables</a>
          <a class="nav-link" href="#Variable_scope">Variable scope</a>
          <a class="nav-link" href="#Global_variables">Global variables</a> 
        </nav>
        <section id="Hello_World" class="main-section">
          <header>Hello World</header>
          <p>To get started with writing JavaScript, open the Scratchpad and write your first "Hello world" JavaScript code:
</p>
          <p>greetMe("World");</p>
          <code>function greetMe(yourName) { alert("Hello " + yourName); }</code>
          <code>greetMe("World");</code>
          <li>Select the code in the pad and hit Ctrl+R to watch it unfold in your browser!
</li>
        </section>
        <section id="Variables" class="main-section">
          <header>Variables</header>
          
          <p>You use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.</p>
          <p>A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($); subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters "A" through "Z" (uppercase) and the characters "a" through "z" (lowercase)</p>
          <code></code>
          <li></li>
        </section>
        <section id="Declaring_variables" class="main-section">
          <header>Declaring variables</header>
          <p>You can declare a variable in three ways:</p>
          <p>With the keyword var. For example,</p>
          <code>var x = 42.</code>
          <p>By simply assigning it a value. For example,</p>
          <code>x = 42.</code>
          <p>With the keyword let. For example,</p>
          <code></code>
          <li>let y = 13.</li>
        </section>
        <section id="Variable_scope" class="main-section">
          <header>Variable scope</header>
          <p>When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function.</p>
          <p>JavaScript before ECMAScript 2015 does not have block statement scope; rather, a variable declared within a block is local to the function (or global scope) that the block resides within. For example the following code will log 5, because the scope of x is the function (or global context) within which x is declared, not the block, which in this case is an if statement.</p>
          <code>if (true) { var x = 5; } console.log(x); // 5</code>
          <li></li>
        </section>
        <section id="Global_variables" class="main-section">
          <header>Global variables</header>
          <p>Global variables are in fact properties of the global object. In web pages the global object is window, so you can set and access global variables using the window.variable syntax</p>
          <p>Consequently, you can access global variables declared in one window or frame from another window or frame by specifying the window or frame name. For example, if a variable called phoneNumber is declared in a document, you can refer to this variable from an iframe as parent.phoneNumber.</p>
          <code></code>
          <li></li>
        </section>
      </body>
    </main>
  </html>

** end of html **

** start of css **

@media (prefers-reduced-motion: no-preference) {
  * {
    scroll-behavior: smooth;
  }
}
h1{
  text-align: center;
  
}
body{
  font-family: Anton, sans-serif;
  font-size: 14px;
  background-color: #202A44;
  color: white;
}
.nav-link{
  font-size: 16px;

}
nav > a{
  color: #dfdfe2;
  margin: 0 0.2rem;
  padding: 0.2rem;
  display: block;
  text-decoration: none;
}
nav > a:hover {
  background-color: #dfdfe2;
  color: #1b1b32;
  cursor: pointer;
}


** end of undefined **

